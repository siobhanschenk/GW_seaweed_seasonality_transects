p1 = ggplot(seagrass_collectors_region,aes(x=individuals_sampled,y=observed_taxa)) +
geom_ribbon(aes(ymin=observed_taxa-confidence_interval_95,
ymax=observed_taxa+confidence_interval_95,
fill=region),alpha=0.2) +
geom_line(aes(color=region),alpha=0.8,size=1.5) +
theme_classic()+
ylab("Observed taxa") +
xlab("Individuals sampled") +
scale_x_log10() +
scale_y_log10() +
scale_color_viridis(discrete = TRUE, option = "D")+
scale_fill_viridis(discrete = TRUE)
p1
# Plot the number of samples with a given sampling depth
p2 = ggplot(seagrass_collectors_region,aes(x=individuals_sampled,y=N_samples,color=region)) +
geom_line(size=1.5,alpha=0.8) +
ylab("Number of samples") +
xlab("Individuals sampled") +
theme_classic()+
scale_color_viridis(discrete = TRUE, option = "D")+
scale_fill_viridis(discrete = TRUE)
p2
p2
# save rarefaction and sampling depth curve
p3=grid.arrange(p1,p2, nrow=1)
# save rarefaction and sampling depth curve
p3=grid.arrange(p1,p2, nrow=1)
ggsave("seagrass_rarefaction_region.pdf",p3,width=7,height=7)
p4
## plot p1 (rarefaction curve) but on a log-log scale
p4 = ggplot(seagrass_collectors_region,aes(x=individuals_sampled,y=N_samples,color=region)) +
geom_line(size=1.5,alpha=0.8) +
ylab("Number of samples") +
xlab("Individuals sampled") +
theme_classic()+
scale_x_log10() +
scale_y_log10()+
scale_color_viridis(discrete = TRUE, option = "D")+
scale_fill_viridis(discrete = TRUE)
p4
p5=grid.arrange(p2,p4, nrow=1)
p5=grid.arrange(p2,p4, nrow=1)
ggsave("seagrass_p2_p4.pdf",p5,width=7,height=7)
# Use the rrarefy function from vegan to rarefy samples down to desired sampling depth
rarefied_table = rrarefy(seagrass_otu[,-(1:3)],sample=1000)
# put metadata back on the rarefied table
rarefied_table = cbind(seagrass_otu[,1:3],rarefied_table)
# remove any samples with depth less than rarefaction depth
# Be careful with this. Doing with this will ensure the samples you
# keep are all of a certain depth, but you will lose samples.
rarefied_table = rarefied_table[apply(seagrass_otu[,-(1:3)],1,abundance) >= 1000,]
# combine abundance table and metadata into one data frame for plotting
# If you chose to rarefy your data, just replace the following seagrass_otu
# with rarefied_table
seagrass = full_join(seagrass_otu,seagrass_metadata,
by=c())
# Calculate collectors curve for all samples in the data set
seagrass_collectors_region = collectors.curve(seagrass_otu,
metadata_cols=1:3,
sample_ID_col="SampleID",
group_by="region")
# Plot a rarefaction curve for each region
p1 = ggplot(seagrass_collectors_region,aes(x=individuals_sampled,y=observed_taxa)) +
geom_ribbon(aes(ymin=observed_taxa-confidence_interval_95,
ymax=observed_taxa+confidence_interval_95,
fill=region),alpha=0.2) +
geom_line(aes(color=region),alpha=0.8,size=1.5) +
theme_classic()+
ylab("Observed taxa") +
xlab("Individuals sampled") +
scale_x_log10() +
scale_y_log10() +
scale_color_viridis(discrete = TRUE, option = "D")+
scale_fill_viridis(discrete = TRUE)
p1
# Plot the number of samples with a given sampling depth
p2 = ggplot(seagrass_collectors_region,aes(x=individuals_sampled,y=N_samples,color=region)) +
geom_line(size=1.5,alpha=0.8) +
ylab("Number of samples") +
xlab("Individuals sampled") +
theme_classic()+
scale_color_viridis(discrete = TRUE, option = "D")+
scale_fill_viridis(discrete = TRUE)
p2
# save rarefaction and sampling depth curve
p3=grid.arrange(p1,p2, nrow=1)
ggsave("seagrass_rarefaction_region.pdf",p3,width=7,height=7)
## plot p1 (rarefaction curve) but on a log-log scale
p4 = ggplot(seagrass_collectors_region,aes(x=individuals_sampled,y=N_samples,color=region)) +
geom_line(size=1.5,alpha=0.8) +
ylab("Number of samples") +
xlab("Individuals sampled") +
theme_classic()+
scale_x_log10() +
scale_y_log10()+
scale_color_viridis(discrete = TRUE, option = "D")+
scale_fill_viridis(discrete = TRUE)
p4
p5=grid.arrange(p2,p4, nrow=1)
ggsave("seagrass_p2_p4.pdf",p5,width=7,height=7)
# Use the rrarefy function from vegan to rarefy samples down to desired sampling depth
rarefied_table = rrarefy(seagrass_otu[,-(1:3)],sample=1000)
# put metadata back on the rarefied table
rarefied_table = cbind(seagrass_otu[,1:3],rarefied_table)
# remove any samples with depth less than rarefaction depth
# Be careful with this. Doing with this will ensure the samples you
# keep are all of a certain depth, but you will lose samples.
rarefied_table = rarefied_table[apply(seagrass_otu[,-(1:3)],1,abundance) >= 1000,]
# combine abundance table and metadata into one data frame for plotting
# If you chose to rarefy your data, just replace the following seagrass_otu
# with rarefied_table
seagrass = full_join(seagrass_otu,seagrass_metadata,
by=c())
# Calculate alpha diversity and save it to the abundance table
seagrass$richness = apply(seagrass_otu[,-(1:3)],1,richness)
seagrass$abundance = apply(seagrass_otu[,-(1:3)],1,abundance)
seagrass$shannons = apply(seagrass_otu[,-(1:3)],1,shannons)
seagrass$simpsons = apply(seagrass_otu[,-(1:3)],1,simpsons)
seagrass$evenness = apply(seagrass_otu[,-(1:3)],1,evenness)
seagrass$chao1 = apply(seagrass_otu[,-(1:3)],1,chao1)
# Look at the names of metadata available to plot
names(seagrass_metadata)
# Plot an alpha diversity measure versus a discrete variable
ggplot(seagrass,aes(x=region,y=richness, fill=region))+
geom_boxplot()+
theme_classic()+
scale_fill_brewer(labels=c("Choked", "Goose", "McMullin", "Triquet"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
text=element_text(size = 15, face= "bold"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size=12))+
guides(fill=guide_legend(title="Region of Sample Collection"))+
labs(x = "Region", y="Species Richness")+
scale_x_discrete(labels=c("Choked", "Goose", "McMullin", "Triquet"))
# Get alpha diversity summaries for each region
# You can add lines to calculate any of the alpha diversity measures
# or any other summaries (e.g., max and min)
seagrass = group_by(seagrass,region)
alpha_diversity_summary = summarise(seagrass,
richness_mean = mean(richness),
richness_median = median(richness),
richness_sd = sd(richness),
shannons_mean = mean(shannons),
shannons_median = median(shannons),
shannons_sd = sd(shannons),
abundance_mean = mean(abundance),
abundance_median = median(abundance),
abundance_sd = sd(abundance),
simpsons_mean = mean(simpsons),
simpsons_median = median(simpsons),
simpsons_sd = sd(simpsons),
evenness_mean = mean(evenness),
evenness_median = median(evenness),
evenness_sd = sd(evenness),
chao1_mean = mean(chao1),
chao1_median = median(chao1),
chao1_sd = sd(chao1))
alpha_diversity_summary
write.csv(alpha_diversity_summary, "diveristy_summary.csv")
## Running a linear regression model
lm1=lm(seagrass$temperature~seagrass$pressure)
# view the linear model output
summary(lm1)
# view the plots of the linear mode. What do you notice about them? What do these points tell you about these variables?
plot(lm1)
## Running an ANOVA
# generate anova
a1 = aov(richness~region, seagrass)
a1
# look at anova results
summary(a1)
plot(a1)
coefficients(a1)
# look for significant differences between then groups
TukeyHSD(a1)
?cor
### *Taxonomy Assignment with the database designed by Evan (silva_132.16s.99_rep_set.dada2.fa.gz) only works on dada2 version 1.12
library(devtools)
devtools::install_github("benjjneb/dada2", ref="v1.16") # change the ref argument to get other versions
browseVignettes("DESeq")
## Thank you to Jane, Emily, and Katy for help
##### WORKSPACE SETUP #####
## load pacakges
library(phyloseq)
library(tidyverse)
library(vegan)
library(hrbrthemes)
library(gcookbook)
library(cowplot)
library(reshape)
library(RColorBrewer)
library(gridExtra)
library(plyr)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 11), # axis text size
axis.title = element_text(size=13)))
##### PLOT SETUP - 2018 LAB FINAL ######
## read in data
laby.prerarefaction = readRDS("laby_lab2018_prerarefaction_phyloseq.rds")
## remove asv_id and asv_sequence
tax_table(laby.prerarefaction) <- tax_table(laby.prerarefaction)[,-1]
## filtering for rank 6
# 1. reshape data based on taxonomic level you are interested in, and select the top N taxa to show in the plot
sgphylo <- laby.prerarefaction %>%
tax_glom(taxrank = "Genus")
## subset phyloseq object to only have final timepoint
phylosub=subset_samples(sgphylo, timepoint=="final")
#View(as.data.frame(phyloseq(sample_data(phylosub))))
## extract otu table from phyloseq object
phylootu = otu_table(phylosub)
phylootu = as.data.frame(t(as.matrix(phylootu)))
## extract metadat from phyloseq object
phylometa = phylosub@sam_data
phylometa = as.matrix(phylometa)
phylometa = as.data.frame(phylometa)
## Adaptation of Jane taxa plot code
#Apply proportion normalisation (relative abundance)
x = phylootu/rowSums(phylootu)
#Sort by most abundant to less abundant
x<-x[,order(colSums(x),decreasing=TRUE)]
rowSums(x)
#Extract list of top N = 20 Taxa
N<-15 #or any other number
taxa_list<-colnames(x)[1:N]
#remove "__Unknown__" and add it to others
taxa_list<-taxa_list[!grepl("Unassigned",taxa_list)]
N<-length(taxa_list)
x <- t(x)     #transposing and then sum up whatever is not in your top 15/20 - will have abundance of top 20 and then final columns with others
colSums(x)
xf2018<-data.frame(x[1:N,]) #get most abundant taxa
xf2018 <- as.data.frame(t(xf2018)) #transpose and cast as data frame
xf2018$Others <- colSums(x[(N+1):length(row.names(x)),])
alltaxa <- as.data.frame(unclass(tax_table(phylosub)))
taxa_N <- alltaxa[which(row.names(alltaxa) %in% taxa_list),]
colnames(xf2018)
print(taxa_N)
# numbber after # is the asv number, the taxa names are in order from most to least abundant
colnames(xf2018) <- c("Alteromonadales; Pseudoalteromonas",  #1
"Alteromonadales; Glaciecola"  ,#8
"Flavobacteriales; Dokdonia" ,#11
"Vibrionales; Aliivibrio" ,#3
"Rhodobacterales; Loktanella"   ,#9
"Flavobacteriales; Winogradskyella" , #6
"Alteromonadales; family Alteromonadaceae", #15
"Alteromonadales; Marinobacter", #18
"Flavobacteriales; Pibocella"  ,#14
"Rhodobacterales; Sulfitobacter" ,#21
"Flavobacteriales; Maribacter",   #7
"Oceanospirillales; Marinomonas", #85
"Betaproteobacteriales; Neisseria", #42
"Alteromonadales; Colwellia" ,#51
"Rhodobacterales; Octadecabacter", #39
"Others")
nrow(xf2018)
## save genus names as dataframe
gf2018 = as.data.frame(colnames(xf2018))
colnames(gf2018)[1] <- "genus_id"
## create dataframe that you will graph
xf2018$SampleID <- row.names(xf2018)
xf2018$innoculum <- phylometa$innoculum
xf2018$removal = phylometa$removal
xf2018$year = phylometa$sampling_year
xf2018_melt = melt.data.frame(xf2018,
id.vars = c("SampleID", "innoculum", "removal", "year"),
variable_name = "Taxa", na.rm=TRUE)
## fix facet labels
inoc <-c(Laby="Lz",Water="H2O")
xf2018_melt$innoculum <- as.character(inoc[xf2018_melt$innoculum])
remov <- c(antibiotic="Abx", NoRemoval="No removal",Vortex="Vortex")
xf2018_melt$removal <- as.character(remov[xf2018_melt$removal])
## add treatment column
xf2018_melt$treatment = paste(xf2018_melt$removal, "+", xf2018_melt$innoculum)
## order factors
xf2018_melt$treatment <- factor(xf2018_melt$treatment, levels=c("Abx + Lz", "Vortex + Lz",
"No removal + Lz", "Abx + H2O",
"Vortex + H2O",
"No removal + H2O"))
##### PLOT SETUP - 2020 LAB FINAL ######
## read in data
laby.prerarefaction = readRDS("laby_lab2020_prerarefaction_phyloseq.rds")
## remove asv_id and asv_sequence
tax_table(laby.prerarefaction) <- tax_table(laby.prerarefaction)[,-1]
## filtering for rank 6
# 1. reshape data based on taxonomic level you are interested in, and select the top N taxa to show in the plot
sgphylo <- laby.prerarefaction %>%
tax_glom(taxrank = "Genus")
## subset phyloseq object to only have 2020-03-dd and no "filed samples"
phylosub=subset_samples(sgphylo, timepoint=="final")
#View(as.data.frame(phyloseq(sample_data(phylosub))))
## extract otu table from phyloseq object
phylootu = otu_table(phylosub)
phylootu = as.data.frame(t(as.matrix(phylootu)))
## extract metadat from phyloseq object
phylometa = phylosub@sam_data
phylometa = as.matrix(phylometa)
phylometa = as.data.frame(phylometa)
## Adaptation of Jane taxa plot code
#Apply proportion normalisation (relative abundance)
x = phylootu/rowSums(phylootu)
#Sort by most abundant to less abundant
x<-x[,order(colSums(x),decreasing=TRUE)]
rowSums(x)
#Extract list of top N = 20 Taxa
N<-15 #or any other number
taxa_list<-colnames(x)[1:N]
#remove "__Unknown__" and add it to others
taxa_list<-taxa_list[!grepl("Unassigned",taxa_list)]
N<-length(taxa_list)
x <- t(x)     #transposing and then sum up whatever is not in your top 15/20 - will have abundance of top 20 and then final columns with others
colSums(x)
xf2020<-data.frame(x[1:N,]) #get most abundant taxa
xf2020 <- as.data.frame(t(xf2020)) #transpose and cast as data frame
xf2020$Others <- colSums(x[(N+1):length(row.names(x)),])
alltaxa <- as.data.frame(unclass(tax_table(phylosub)))
taxa_N <- alltaxa[which(row.names(alltaxa) %in% taxa_list),]
colnames(xf2020)
print(taxa_N)
colnames(xf2020) <- c("Oceanospirillales; Marinomonas", #2
"Alteromonadales; Glaciecola",#4
"Alteromonadales; Colwellia",#16
"Alteromonadales; Pseudoalteromonas",#1
"Betaproteobacteriales; Methylotenera",#38
"Alteromonadales; Shewanella",#26
"Nitrosococcales; Methylophagaceae",#75
"Alteromonadales; Paraglaciecola"  ,#77
"Chitinophagales; Lewinella",#22
"Flavobacteriales; family Flavobacteriaceae",#64
"Alteromonadales; family Alteromonadaceae",#15
"Flavobacteriales; Kordia",#115
"Rhodobacterales; Sulfitobacter"  ,#21
"Flavobacteriales; Polaribacter_2",
"Rhodobacterales; Loktanella"  ,#9
"Others")
nrow(xf2020)
## save genus names as dataframe
gf2020 = as.data.frame(colnames(xf2020))
colnames(gf2020)[1] <- "genus_id"
## create dataframe that you will graph
xf2020$SampleID <- row.names(xf2020)
xf2020$year = phylometa$sampling_year
xf2020$innoculum = phylometa$innoculum
xf2020$removal = phylometa$removal
xf2020_melt = melt.data.frame(xf2020,
id.vars = c("SampleID", "year", "innoculum","removal"),
variable_name = "Taxa", na.rm=TRUE)
## fix facet labels
inoc <-c(Laby="Lz",Water="H2O")
xf2020_melt$innoculum <- as.character(inoc[xf2020_melt$innoculum])
remov <- c(Bleach="Bleach", NoRemoval="No removal")
xf2020_melt$removal <- as.character(remov[xf2020_melt$removal])
## add treatment column
xf2020_melt$treatment = paste(xf2020_melt$removal, "+", xf2020_melt$innoculum)
## order factors
xf2020_melt$treatment <- factor(xf2020_melt$treatment, levels=c("Bleach + Lz", "Bleach + H2O",
"No removal + Lz","No removal + H2O"))
##### PLOT SETUP - FIELD HEALTHY ######
## read in data
laby.prerarefaction = readRDS("laby_field_prerarefaction_phyloseq.rds")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
## Thank you to Jane, Emily, and Katy for help
##### WORKSPACE SETUP #####
## load pacakges
library(phyloseq)
install.packages("C:/Users/siobh/Downloads/phyloseq_1.36.0.zip", repos = NULL, type = "win.binary")
library("phyloseq")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
if (!requireNamespace("BiocManager", quietly = TRUE, force = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
install.packages("phyloseq")
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
BiocManager::install("phyloseq", force=TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
BiocManager::install("phyloseq", force=TRUE)
install.packages("xfun")
install.packages("xfun")
library(phyloseq)
install.packages("RCurl")
library(phyloseq)
install.packages("RCurl")
install.packages("C:/Users/siobh/OneDrive/Desktop/RCurl_1.98-1.4.tar.gz", repos = NULL, type = "source")
library(phyloseq)
install.packages("htmltools")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
##### EXPORT OTU TABLE TO BIOM FORMAT #####
phyloseq = readRDS("INPUT_DATA_phyloseq_filtered-chen-salinity.rds")
##### WORKSPACE SET UP #####
## load packages
library(dada2)
library(readr)
library(stringr)
library(tidyverse)
library(UMI4Cats)
## set path
path = "C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Chen Salinity/chen_unpub/2015-Sept_PooledLabSample"
## list the files in the path
list.files(path)
##### DEMULTIPLEX READS WITH UMI4Cats package ######
#https://rdrr.io/bioc/UMI4Cats/man/demultiplexFastq.html
fastq.R1 <- file.path(path, "CIITA", "fastq", "R1.fastq.gz")
barcodes <- data.frame(
sample = c("CIITA"),
barcode = c("GTGYCAGCMGCCGCGGTAA")
)
barcodes <- data.frame(
sample = "Index.fastq.gz",
barcode = c("GTGYCAGCMGCCGCGGTAA")
)
demultiplexFastq(
barcodes = barcodes,
fastq = fastq.R1,
out_path = path
)
##### DEMULTIPLEX READS WITH UMI4Cats package ######
#https://rdrr.io/bioc/UMI4Cats/man/demultiplexFastq.html
fastq.R1 <- file.path(path, "CIITA", "fastq", "fw_R1.fastq.gz")
##### DEMULTIPLEX READS WITH UMI4Cats package ######
#https://rdrr.io/bioc/UMI4Cats/man/demultiplexFastq.html
fastq.R1 <- file.path(path, "Index.fastq.gz", "fastq", "fw_R1.fastq.gz")
barcodes <- data.frame(
sample = "Index.fastq.gz",
barcode = c("GTGYCAGCMGCCGCGGTAA"))
demultiplexFastq(
barcodes = barcodes,
fastq = fastq.R1,
out_path = path
)
##### DEMULTIPLEX READS WITH UMI4Cats package ######
#https://rdrr.io/bioc/UMI4Cats/man/demultiplexFastq.html
fastq.R1 <- file.path(path, "fw_R1.fastq.gz")
barcodes <- data.frame(
sample = "Index.fastq.gz",
barcode = c("GTGYCAGCMGCCGCGGTAA"))
demultiplexFastq(
barcodes = barcodes,
fastq = fastq.R1,
out_path = path
)
shiny::runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
##### WORKSPACE SET UP #####
## load packages
library(tidyverse)
library(plyr)
library(ggplot2);theme_set(theme(axis.text.x = element_text(face="bold"),
axis.text.y = element_text(size=12, face="bold"),
axis.title.x = element_text(size=15, face="bold"),
axis.title.y = element_text(size=15, face="bold")))
## tell R where to get the data. !!This is computer specific because it's where you downloaded the file
setwd("C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects")
## read in data
algae = read.csv("GW_seaweed_seasonality_transect_data.csv")
## plot items
pd=position_dodge(0.1)
color.month = c("dodgerblue4","dodgerblue","deepskyblue","cyan1","plum1","mediumorchid1","mediumpurple1",
"purple1","purple4","magenta4","magenta2","violet","darkorchid1")
##### FORMAT DATA FOR ANALYSIS ####
## remove transects 1 and 5
algae = subset(algae, algae$transect_id!=1& algae$transect_id!=5)
## how many total columns -> makes it so you don't have to edit numbers as new algae are added
n=ncol(algae)
## make all algae abundance columns numeric
algae[,7:n] <- sapply(algae[,c(7:n)], as.numeric)
## fill empty cells (instances of 0 percnet cover) with 0
algae[is.na(algae)]<-0
## pivot data. This is important for plotting and analysis later
algae.wide = algae %>%
pivot_longer(-c(1:6))
## rename value column
names(algae.wide)[names(algae.wide)=="value"]<-"percent_cover"
## separate out seaweed phylum info
algae.wide = separate(data = algae.wide,
col = name,
into = c("seaweed_id","phylum"),
sep = "__")
## summarize data across years for the same transect and month
algae.wide.grouped = ddply(algae.wide, c("transect_id","distance_along_transect_m","seaweed_id","phylum","month"),
summarise,
N = length(percent_cover), ## sample size
mean = mean(percent_cover),
sd = sd(percent_cover)) %>%
mutate(se = sd/sqrt(N), ## standard error
lci = mean - 1.960*(se), ## lower bound of 95% confidence interval
uci = mean + 1.960*(se))
## fill empty cells (instances of 0 percnet cover) with 0 (again)
algae.wide.grouped[is.na(algae.wide.grouped)]<-0
## set order of month
algae.wide.grouped$month = factor(algae.wide.grouped$month, levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
View(algae)
View(algae.wide)
## get seaweed species list
speclist = as.data.frame(colnames(algae))
speclist = speclist[-c(1:6),]
