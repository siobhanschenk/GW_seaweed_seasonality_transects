blistering=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(blistering)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "orange"))+
facet_nested(.~ culture_round+salinity_percent, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.y = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Blistering")
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ culture_round+salinity_percent, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank(),
axis.title.y = element_blank())+
labs(y="Culture Day", fill="Presence of Holes")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ culture_round+salinity_percent, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
blistering=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(blistering)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "orange"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.y = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Blistering")
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank(),
axis.title.y = element_blank())+
labs(y="Culture Day", fill="Presence of Holes")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
blistering=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(blistering)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "orange"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"))+
labs(x="Meristem ID", y=" ", fill="Presence of Blistering")
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(y=" ", fill="Presence of Holes")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(y=" ", fill="Presence of Holes  ")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(y=" ", fill="Presence of Holes  .")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(y=" ", fill="Presence of Holes    .")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
holes=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(holes_general_dammage)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "grey10"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(y=" ", fill="Presence of Holes     .")
bleach=ggplot(relv.days, aes(x=sample_id, y=as.factor(exp_day), fill=as.factor(bleached)))+
geom_tile()+
scale_fill_manual(values=c("grey90", "lightgreen"))+
facet_nested(.~ salinity_percent+culture_round, labeller = label_parsed, scales = "free") +
theme(panel.spacing = unit(0,"line")) +
theme(axis.text.x = element_blank(), panel.spacing = unit(0,"lines"),
axis.title.x = element_blank())+
labs(x="Meristem ID", y="Culture Day", fill="Presence of Bleaching")
ggarrange(holes, bleach, blistering, nrow=3, ncol=1)
grid.draw(ggarrange(holes, bleach, blistering, nrow=3, ncol=1))
install.packages("grid")
##### WORKSPACE SETUP  ####
## load packages
library(tidyverse)
library(plyr)
library(lme4)
library(stats)
library(lmtest)
library(phyloseq)
library(tidyverse)
library(data.table)
library(ggpubr)
library(ggh4x)
library(grid)
library(stats)
library(lmtest)
library(car)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 10, face="bold"), # axis text size
axis.title = element_text(size=15),
axis.ticks.x=element_blank())) ## remove x axis titles and tick marks
## set color vector
salinity.colors = c("lightskyblue","deepskyblue3","blue4")
cultureround.colors=c("orange","olivedrab","forestgreen", "springgreen3","springgreen","skyblue1", "purple1","magenta")
## read in data
wetweight = read.csv("C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Freshet Saccharina/github_aquarium_salinity_saccharina_latissima/aquarium_wet_weight_data.csv")
pam = read.csv("C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Freshet Saccharina/github_aquarium_salinity_saccharina_latissima/pam_split_2022-08-10.csv")
bact.nr = readRDS("C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Freshet Saccharina/github_spring_freshet_saccharina_latissima/2-procesing_intermediate_files/SF_2021_and_2022_filtered_notrarefied.rds")
bact.r = readRDS("C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Freshet Saccharina/github_spring_freshet_saccharina_latissima/2-procesing_intermediate_files/SF_2021_and_2022_coveraged_rarified.RDS")
View(bact.nr@tax_table)
gran = subset_taxa(bact.nr, Genus=="Granulosicoccus")
gran = as.data.frame(gran@tax_table)
View(gran)
gran = gran %>% rownames_to_column(var="asv_sequence")
View(gran)
gran = gran %>% rownames_to_column(var="asv_number")
gran$asv_id = paste0("ASV", gran$asv_number)
write.csv(gran, "granulo.csv")
getwd()
shiny::runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
runApp('C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw')
##### WORKSPACE SET UP ######
## load packages
library(shiny)
library(tidyverse)
library(plyr)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 15, face="bold"),
axis.title = element_text(size=20, face="bold"),
strip.text = element_text(size = 12, face="bold"),
legend.text=element_text(size=15),
legend.title=element_text(size=15, face="bold")))
## load data
algae = read.csv("./Data/proj.csv")
setwd("C:/Users/siobh/OneDrive - The University Of British Columbia/Project - Seaweed Seasonality Transects/seaweed_seasonality_2021-09-05/git_GW_seaweed_seasonality_transects/seaweed_transects_gw/Data")
##### WORKSPACE SET UP ######
## load packages
library(shiny)
library(tidyverse)
library(plyr)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 15, face="bold"),
axis.title = element_text(size=20, face="bold"),
strip.text = element_text(size = 12, face="bold"),
legend.text=element_text(size=15),
legend.title=element_text(size=15, face="bold")))
## load data
algae = read.csv("./Data/proj.csv")
## load data
algae = read.csv("proj.csv")
##### FORMAT DATA FOR ANALYSIS ####
## remove transects 1 and 5
algae = subset(algae, algae$transect_id!=1& algae$transect_id!=5)
## how many total columns -> makes it so you don't have to edit numbers as new algae are added
n=ncol(algae)
## make all algae abundance columns numeric
algae[,9:n] <- sapply(algae[,c(9:n)], as.numeric)
## fill empty cells (instances of 0 percent cover) with 0
algae[is.na(algae)]<-0
## pivot data. This is important for plotting and analysis later
algae.wide = algae %>%
pivot_longer(-c(1:8))
## rename value column
names(algae.wide)[names(algae.wide)=="value"]<-"percent_cover"
## separate out seaweed phylum info
algae.wide = separate(data = algae.wide,
col = name,
into = c("seaweed_id","phylum"),
sep = "__")
## summarize data across years for the same transect and month
algae.wide.grouped = ddply(algae.wide, c("transect_id","distance_along_transect_m","seaweed_id","phylum","month", "year"),
summarise,
N = length(percent_cover), ## sample size
mean = mean(percent_cover),
sd = sd(percent_cover)) %>%
mutate(se = sd/sqrt(N), ## standard error
lci = mean - 1.960*(se), ## lower bound of 95% confidence interval
uci = mean + 1.960*(se))
## fill empty cells (instances of 0 percnet cover) with 0 (again)
algae.wide.grouped[is.na(algae.wide.grouped)]<-0
## set order of month
algae.wide.grouped$month = factor(algae.wide.grouped$month, levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
## get seaweed species list
speclist = algae.wide$seaweed_id
speclist = unique(speclist)
View(algae.wide.grouped)
View(algae.wide)
View(algae)
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
nspecies = ncols(algae) - 8
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
nspecies = ncol(algae) - 8
algae['Max'] = algae[[c(9:nspecies)]].idxmax(axis=1)
algae$Max = algae[[c(9:nspecies)]].idxmax(axis=1)
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
nspecies = ncol(algae) - 8
algae$Max = algae[[c(9:51)]].idxmax(axis=1)
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
algae.max = algae %>%
mutate(Class = names(.)[max.col(.)])
View(algae.max)
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
algae.otu = algae[,c(9:nspecies)]
algae.max = algae.otu %>%
mutate(Class = names(.)[max.col(.)])
View(algae.max)
algae.max = algae.otu %>%
mutate(dominant_taxa = names(.)[max.col(.)])
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
## get end of otu table
nspecies = ncol(algae) - 8
View(algae)
## merge algae.max back with original algae dataset
algae = merge(algae, algae.max)
View(algae)
##### WORKSPACE SET UP ######
## load packages
library(shiny)
library(tidyverse)
library(plyr)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 15, face="bold"),
axis.title = element_text(size=20, face="bold"),
strip.text = element_text(size = 12, face="bold"),
legend.text=element_text(size=15),
legend.title=element_text(size=15, face="bold")))
## load data
algae = read.csv("proj.csv")
##### FORMAT DATA FOR ANALYSIS ####
## remove transects 1 and 5
algae = subset(algae, algae$transect_id!=1& algae$transect_id!=5)
## how many total columns -> makes it so you don't have to edit numbers as new algae are added
n=ncol(algae)
## make all algae abundance columns numeric
algae[,9:n] <- sapply(algae[,c(9:n)], as.numeric)
## fill empty cells (instances of 0 percent cover) with 0
algae[is.na(algae)]<-0
## pivot data. This is important for plotting and analysis later
algae.wide = algae %>%
pivot_longer(-c(1:8))
## rename value column
names(algae.wide)[names(algae.wide)=="value"]<-"percent_cover"
## separate out seaweed phylum info
algae.wide = separate(data = algae.wide,
col = name,
into = c("seaweed_id","phylum"),
sep = "__")
## summarize data across years for the same transect and month
algae.wide.grouped = ddply(algae.wide, c("transect_id","distance_along_transect_m","seaweed_id","phylum","month", "year"),
summarise,
N = length(percent_cover), ## sample size
mean = mean(percent_cover),
sd = sd(percent_cover)) %>%
mutate(se = sd/sqrt(N), ## standard error
lci = mean - 1.960*(se), ## lower bound of 95% confidence interval
uci = mean + 1.960*(se))
## fill empty cells (instances of 0 percnet cover) with 0 (again)
algae.wide.grouped[is.na(algae.wide.grouped)]<-0
## set order of month
algae.wide.grouped$month = factor(algae.wide.grouped$month, levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
## get seaweed species list
speclist = algae.wide$seaweed_id
speclist = unique(speclist)
##### GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
## get end of otu table
nspecies = ncol(algae) - 8
## get otu dataframe
algae.otu = algae[,c(9:nspecies)]
## get list of dominant taxa in otu dataframe
algae.max = algae.otu %>%
mutate(dominant_taxa = names(.)[max.col(.)])
## merge algae.max back with original algae dataset
algae = full_join(algae, algae.max)
View(algae)
##### WORKSPACE SET UP ######
## load packages
library(shiny)
library(tidyverse)
library(plyr)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 15, face="bold"),
axis.title = element_text(size=20, face="bold"),
strip.text = element_text(size = 12, face="bold"),
legend.text=element_text(size=15),
legend.title=element_text(size=15, face="bold")))
## load data
algae = read.csv("proj.csv")
##### FORMAT DATA FOR ANALYSIS ####
## remove transects 1 and 5
algae = subset(algae, algae$transect_id!=1& algae$transect_id!=5)
## how many total columns -> makes it so you don't have to edit numbers as new algae are added
n=ncol(algae)
## make all algae abundance columns numeric
algae[,9:n] <- sapply(algae[,c(9:n)], as.numeric)
## fill empty cells (instances of 0 percent cover) with 0
algae[is.na(algae)]<-0
## pivot data. This is important for plotting and analysis later
algae.wide = algae %>%
pivot_longer(-c(1:8))
## rename value column
names(algae.wide)[names(algae.wide)=="value"]<-"percent_cover"
## separate out seaweed phylum info
algae.wide = separate(data = algae.wide,
col = name,
into = c("seaweed_id","phylum"),
sep = "__")
## summarize data across years for the same transect and month
algae.wide.grouped = ddply(algae.wide, c("transect_id","distance_along_transect_m","seaweed_id","phylum","month", "year"),
summarise,
N = length(percent_cover), ## sample size
mean = mean(percent_cover),
sd = sd(percent_cover)) %>%
mutate(se = sd/sqrt(N), ## standard error
lci = mean - 1.960*(se), ## lower bound of 95% confidence interval
uci = mean + 1.960*(se))
## fill empty cells (instances of 0 percnet cover) with 0 (again)
algae.wide.grouped[is.na(algae.wide.grouped)]<-0
## set order of month
algae.wide.grouped$month = factor(algae.wide.grouped$month, levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
## get seaweed species list
speclist = algae.wide$seaweed_id
speclist = unique(speclist)
##### !new! GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
## get end of otu table
nspecies = ncol(algae.dm) - 8
## get end of otu table
nspecies = ncol(algae) - 8
## get otu dataframe
algae.otu = algae[,c(9:nspecies)]
## get list of dominant taxa in otu dataframe
algae.max = algae.otu %>%
mutate(dominant_taxa = names(.)[max.col(.)])
## merge algae.max back with original algae dataset
algae = full_join(algae, algae.max)
## get end of otu table
nspecies = ncol(algae) - 8
## get otu dataframe
algae.otu = algae[,c(9:nspecies)]
## get list of dominant taxa in otu dataframe
algae.max = algae.otu %>%
mutate(dominant_taxa = names(.)[max.col(.)])
## merge algae.max back with original algae dataset
algae = full_join(algae, algae.max)
View(algae)
##### WORKSPACE SET UP ######
## load packages
library(shiny)
library(tidyverse)
library(plyr)
library(ggplot2); theme_set(theme_bw()+
theme(panel.grid = element_blank(),
strip.background = element_rect(fill="white"),
axis.text = element_text(size = 15, face="bold"),
axis.title = element_text(size=20, face="bold"),
strip.text = element_text(size = 12, face="bold"),
legend.text=element_text(size=15),
legend.title=element_text(size=15, face="bold")))
## load data
algae = read.csv("proj.csv")
##### FORMAT DATA FOR ANALYSIS ####
## remove transects 1 and 5
algae = subset(algae, algae$transect_id!=1& algae$transect_id!=5)
## how many total columns -> makes it so you don't have to edit numbers as new algae are added
n=ncol(algae)
## make all algae abundance columns numeric
algae[,9:n] <- sapply(algae[,c(9:n)], as.numeric)
## fill empty cells (instances of 0 percent cover) with 0
algae[is.na(algae)]<-0
## pivot data. This is important for plotting and analysis later
algae.wide = algae %>%
pivot_longer(-c(1:8))
## rename value column
names(algae.wide)[names(algae.wide)=="value"]<-"percent_cover"
## separate out seaweed phylum info
algae.wide = separate(data = algae.wide,
col = name,
into = c("seaweed_id","phylum"),
sep = "__")
## summarize data across years for the same transect and month
algae.wide.grouped = ddply(algae.wide, c("transect_id","distance_along_transect_m","seaweed_id","phylum","month", "year"),
summarise,
N = length(percent_cover), ## sample size
mean = mean(percent_cover),
sd = sd(percent_cover)) %>%
mutate(se = sd/sqrt(N), ## standard error
lci = mean - 1.960*(se), ## lower bound of 95% confidence interval
uci = mean + 1.960*(se))
## fill empty cells (instances of 0 percnet cover) with 0 (again)
algae.wide.grouped[is.na(algae.wide.grouped)]<-0
## set order of month
algae.wide.grouped$month = factor(algae.wide.grouped$month, levels=c("1","2","3","4","5","6","7","8","9","10","11","12"))
## get seaweed species list
speclist = algae.wide$seaweed_id
speclist = unique(speclist)
##### !new! GET THE DOMINANT TAXA FOR EACH DISTANCE FROM SEAWALL - CHANGE TO ELEVATION BINS LATER ####
## get end of otu table
nspecies = ncol(algae) - 8
## get otu dataframe
algae.otu = algae[,c(9:nspecies)]
## get list of dominant taxa in otu dataframe
algae.max = algae.otu %>%
mutate(dominant_taxa = names(.)[max.col(.)])
## merge algae.max back with original algae dataset
algae.dom = full_join(algae, algae.max)
View(algae.dom)
## make table of dominant taxa by month/year/transect id
tab1 <- table(algae.dom$dominant_taxa, algae.dom$month)
tab1
## remove redundant columns
algae.dom = algae.dom[,-c(9:nspecies)]
View(algae.dom)
## merge algae.max back with original algae dataset
algae.dom = full_join(algae, algae.max)
View(algae.dom)
## get end of otu table
nspecies = ncol(algae)
## get otu dataframe
algae.otu = algae[,c(9:nspecies)]
## get list of dominant taxa in otu dataframe
algae.max = algae.otu %>%
mutate(dominant_taxa = names(.)[max.col(.)])
## merge algae.max back with original algae dataset
algae.dom = full_join(algae, algae.max)
## remove redundant columns
algae.dom = algae.dom[,-c(8:nspecies)]
View(algae.dom)
## get list of factors in order
algae.colnames= as.list(c(unique(colnames(algae))))
## get list of factors in order
algae.colnames= as.list(c(unique(colnames(algae))))
View(algae)
## remove others from list
no.transect.id = algae.colnames[ !algae.columnames == 'transect_id']
## remove others from list
no.transect.id = algae.colnames[ !algae.colnames == 'transect_id']
## unlist
no.transect.id = unlist(no.transect.id)
